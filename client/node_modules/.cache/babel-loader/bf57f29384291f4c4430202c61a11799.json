{"ast":null,"code":"import { call, put, takeLatest, all } from 'redux-saga/effects';\nimport userActionTypes from './userTypes';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './userActions';\nexport function* getSnapshotFromAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  try {\n    yield getSnapshotFromAuth(user, additionalData);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onSingUpSuccess() {\n  yield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onEmailSignIn() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOut() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport default function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignIn), call(onCheckUserSession), call(onSignOut), call(onSignUpStart), call(onSingUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/Dejan/Desktop/REACT Z2M 2020/20.Stripe part II/KC-CLOTHING/client/src/redux/user/userSagas.js"],"names":["call","put","takeLatest","all","userActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFromAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onSingUpSuccess","SIGN_UP_SUCCESS","onSignUpStart","SIGN_UP_START","onEmailSignIn","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOut","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { call, put, takeLatest, all } from 'redux-saga/effects';\r\nimport userActionTypes from './userTypes';\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase';\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './userActions';\r\n\r\nexport function* getSnapshotFromAuth(userAuth, additionalData){\r\n\ttry{\r\n\t\tconst userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n\t\tconst userSnapshot = yield userRef.get();\r\n\t\tyield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n\t}\r\n\tcatch (error){\r\n\t\tyield put(signInFailure(error));\r\n\t}\r\n}\r\n\r\n\r\nexport function* signInWithGoogle(){\r\n\ttry{\r\n\t\tconst { user } = yield auth.signInWithPopup(googleProvider);\r\n\t\tyield getSnapshotFromAuth(user);\r\n\t} catch (error) {\r\n\t\tyield put(signInFailure(error));\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }){\r\n\ttry{\r\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n\t\tyield getSnapshotFromAuth(user);\r\n\t} catch (error){\r\n\t\tyield put(signInFailure(error));\r\n\t}\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n\ttry {\r\n\t\tconst userAuth = yield getCurrentUser();\r\n\t\tif(!userAuth)\r\n\t\t\treturn;\r\n\t\tconst userRef = yield call(createUserProfileDocument, userAuth);\r\n\t\tconst userSnapshot = yield userRef.get();\r\n\t\tyield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n\t} catch (error) {\r\n\t\tyield put(signInFailure(error));\r\n\t}\r\n}\r\n\r\nexport function* signOut(){\r\n\ttry {\r\n\t\tyield auth.signOut();\r\n\t\tyield put(signOutSuccess());\r\n\t} catch (error) {\r\n\t\tyield put(signOutFailure(error));\r\n\t}\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n\tyield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* signUp({ payload: { email, password, displayName } }){\r\n\ttry {\r\n\t\tconst { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n\t\tyield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n\t} catch (error) {\r\n\t\tyield put(signUpFailure(error));\r\n\t}\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }){\r\n\ttry{\r\n\t\tyield getSnapshotFromAuth(user, additionalData);\r\n\t}\r\n\tcatch(error){\r\n\t\tyield put(signInFailure(error));\r\n\t}\r\n}\r\n\r\nexport function* onSingUpSuccess(){\r\n\tyield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport function* onSignUpStart(){\r\n\tyield takeLatest(userActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* onEmailSignIn(){\r\n\tyield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n\tyield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOut(){\r\n\tyield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport default function* userSagas(){\r\n\tyield all([call(onGoogleSignInStart), call(onEmailSignIn), call(onCheckUserSession), call(onSignOut), call(onSignUpStart), call(onSingUpSuccess)]);\r\n}"]},"metadata":{},"sourceType":"module"}